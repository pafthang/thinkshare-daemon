// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.1
// source: conductor.proto

package packet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Closer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp string `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Reason    string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Closer) Reset() {
	*x = Closer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Closer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Closer) ProtoMessage() {}

func (x *Closer) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Closer.ProtoReflect.Descriptor instead.
func (*Closer) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{0}
}

func (x *Closer) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Closer) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{1}
}

func (x *Account) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Account) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type StorageStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info    *Partition `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Account *Account   `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *StorageStatus) Reset() {
	*x = StorageStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageStatus) ProtoMessage() {}

func (x *StorageStatus) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageStatus.ProtoReflect.Descriptor instead.
func (*StorageStatus) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{2}
}

func (x *StorageStatus) GetInfo() *Partition {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *StorageStatus) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type StorageChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path  string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	EOF   bool   `protobuf:"varint,3,opt,name=EOF,proto3" json:"EOF,omitempty"`
}

func (x *StorageChunk) Reset() {
	*x = StorageChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageChunk) ProtoMessage() {}

func (x *StorageChunk) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageChunk.ProtoReflect.Descriptor instead.
func (*StorageChunk) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{3}
}

func (x *StorageChunk) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *StorageChunk) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *StorageChunk) GetEOF() bool {
	if x != nil {
		return x.EOF
	}
	return false
}

type WorkerSessions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*WorkerSession `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	Apps     []*AppSession    `protobuf:"bytes,2,rep,name=apps,proto3" json:"apps,omitempty"`
}

func (x *WorkerSessions) Reset() {
	*x = WorkerSessions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerSessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerSessions) ProtoMessage() {}

func (x *WorkerSessions) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerSessions.ProtoReflect.Descriptor instead.
func (*WorkerSessions) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{4}
}

func (x *WorkerSessions) GetSessions() []*WorkerSession {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *WorkerSessions) GetApps() []*AppSession {
	if x != nil {
		return x.Apps
	}
	return nil
}

type AppSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp string   `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Exe       string   `protobuf:"bytes,3,opt,name=exe,proto3" json:"exe,omitempty"`
	Folder    string   `protobuf:"bytes,4,opt,name=folder,proto3" json:"folder,omitempty"`
	Args      []string `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
	Envs      []string `protobuf:"bytes,6,rep,name=envs,proto3" json:"envs,omitempty"`
	Manifest  string   `protobuf:"bytes,7,opt,name=manifest,proto3" json:"manifest,omitempty"` // not sync
}

func (x *AppSession) Reset() {
	*x = AppSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSession) ProtoMessage() {}

func (x *AppSession) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSession.ProtoReflect.Descriptor instead.
func (*AppSession) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{5}
}

func (x *AppSession) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AppSession) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *AppSession) GetExe() string {
	if x != nil {
		return x.Exe
	}
	return ""
}

func (x *AppSession) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *AppSession) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *AppSession) GetEnvs() []string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *AppSession) GetManifest() string {
	if x != nil {
		return x.Manifest
	}
	return ""
}

type WorkerSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp       string       `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AuthConfig      string       `protobuf:"bytes,3,opt,name=authConfig,proto3" json:"authConfig,omitempty"`           // do sync
	SignalingConfig string       `protobuf:"bytes,4,opt,name=signalingConfig,proto3" json:"signalingConfig,omitempty"` // do sync
	WebrtcConfig    string       `protobuf:"bytes,5,opt,name=webrtcConfig,proto3" json:"webrtcConfig,omitempty"`       // do sync
	MediaConfig     *MediaConfig `protobuf:"bytes,6,opt,name=mediaConfig,proto3" json:"mediaConfig,omitempty"`         // do sync
	Manifest        string       `protobuf:"bytes,8,opt,name=manifest,proto3" json:"manifest,omitempty"`               // not sync
}

func (x *WorkerSession) Reset() {
	*x = WorkerSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerSession) ProtoMessage() {}

func (x *WorkerSession) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerSession.ProtoReflect.Descriptor instead.
func (*WorkerSession) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{6}
}

func (x *WorkerSession) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkerSession) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *WorkerSession) GetAuthConfig() string {
	if x != nil {
		return x.AuthConfig
	}
	return ""
}

func (x *WorkerSession) GetSignalingConfig() string {
	if x != nil {
		return x.SignalingConfig
	}
	return ""
}

func (x *WorkerSession) GetWebrtcConfig() string {
	if x != nil {
		return x.WebrtcConfig
	}
	return ""
}

func (x *WorkerSession) GetMediaConfig() *MediaConfig {
	if x != nil {
		return x.MediaConfig
	}
	return nil
}

func (x *WorkerSession) GetManifest() string {
	if x != nil {
		return x.Manifest
	}
	return ""
}

type Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device     string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Mountpoint string `protobuf:"bytes,2,opt,name=mountpoint,proto3" json:"mountpoint,omitempty"`
	Fstype     string `protobuf:"bytes,3,opt,name=fstype,proto3" json:"fstype,omitempty"`
	Opts       string `protobuf:"bytes,4,opt,name=opts,proto3" json:"opts,omitempty"`
}

func (x *Partition) Reset() {
	*x = Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partition) ProtoMessage() {}

func (x *Partition) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partition.ProtoReflect.Descriptor instead.
func (*Partition) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{7}
}

func (x *Partition) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Partition) GetMountpoint() string {
	if x != nil {
		return x.Mountpoint
	}
	return ""
}

func (x *Partition) GetFstype() string {
	if x != nil {
		return x.Fstype
	}
	return ""
}

func (x *Partition) GetOpts() string {
	if x != nil {
		return x.Opts
	}
	return ""
}

type WorkerInfor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  string       `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Hostname   string       `protobuf:"bytes,2,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	CPU        string       `protobuf:"bytes,3,opt,name=CPU,proto3" json:"CPU,omitempty"`
	RAM        string       `protobuf:"bytes,4,opt,name=RAM,proto3" json:"RAM,omitempty"`
	BIOS       string       `protobuf:"bytes,5,opt,name=BIOS,proto3" json:"BIOS,omitempty"`
	PublicIP   string       `protobuf:"bytes,6,opt,name=PublicIP,proto3" json:"PublicIP,omitempty"`
	PrivateIP  string       `protobuf:"bytes,7,opt,name=PrivateIP,proto3" json:"PrivateIP,omitempty"`
	GPUs       []string     `protobuf:"bytes,8,rep,name=GPUs,proto3" json:"GPUs,omitempty"`
	Disks      []string     `protobuf:"bytes,9,rep,name=disks,proto3" json:"disks,omitempty"`
	Partitions []*Partition `protobuf:"bytes,10,rep,name=partitions,proto3" json:"partitions,omitempty"`
	NICs       []string     `protobuf:"bytes,11,rep,name=NICs,proto3" json:"NICs,omitempty"`
}

func (x *WorkerInfor) Reset() {
	*x = WorkerInfor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerInfor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerInfor) ProtoMessage() {}

func (x *WorkerInfor) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerInfor.ProtoReflect.Descriptor instead.
func (*WorkerInfor) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{8}
}

func (x *WorkerInfor) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *WorkerInfor) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *WorkerInfor) GetCPU() string {
	if x != nil {
		return x.CPU
	}
	return ""
}

func (x *WorkerInfor) GetRAM() string {
	if x != nil {
		return x.RAM
	}
	return ""
}

func (x *WorkerInfor) GetBIOS() string {
	if x != nil {
		return x.BIOS
	}
	return ""
}

func (x *WorkerInfor) GetPublicIP() string {
	if x != nil {
		return x.PublicIP
	}
	return ""
}

func (x *WorkerInfor) GetPrivateIP() string {
	if x != nil {
		return x.PrivateIP
	}
	return ""
}

func (x *WorkerInfor) GetGPUs() []string {
	if x != nil {
		return x.GPUs
	}
	return nil
}

func (x *WorkerInfor) GetDisks() []string {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *WorkerInfor) GetPartitions() []*Partition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *WorkerInfor) GetNICs() []string {
	if x != nil {
		return x.NICs
	}
	return nil
}

type WorkerLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp string `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Log       string `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
	Level     string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	Source    string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *WorkerLog) Reset() {
	*x = WorkerLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerLog) ProtoMessage() {}

func (x *WorkerLog) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerLog.ProtoReflect.Descriptor instead.
func (*WorkerLog) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{9}
}

func (x *WorkerLog) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *WorkerLog) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *WorkerLog) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *WorkerLog) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type WorkerMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp string  `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Name      string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RawValue  float64 `protobuf:"fixed64,3,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`
}

func (x *WorkerMetric) Reset() {
	*x = WorkerMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerMetric) ProtoMessage() {}

func (x *WorkerMetric) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerMetric.ProtoReflect.Descriptor instead.
func (*WorkerMetric) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{10}
}

func (x *WorkerMetric) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *WorkerMetric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkerMetric) GetRawValue() float64 {
	if x != nil {
		return x.RawValue
	}
	return 0
}

type Monitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorHandle int32     `protobuf:"varint,1,opt,name=MonitorHandle,proto3" json:"MonitorHandle,omitempty"`
	MonitorName   string    `protobuf:"bytes,2,opt,name=MonitorName,proto3" json:"MonitorName,omitempty"`
	DeviceName    string    `protobuf:"bytes,3,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	Adapter       string    `protobuf:"bytes,4,opt,name=Adapter,proto3" json:"Adapter,omitempty"`
	Width         int32     `protobuf:"varint,5,opt,name=Width,proto3" json:"Width,omitempty"`
	Height        int32     `protobuf:"varint,6,opt,name=Height,proto3" json:"Height,omitempty"`
	Framerate     int32     `protobuf:"varint,7,opt,name=Framerate,proto3" json:"Framerate,omitempty"`
	IsPrimary     bool      `protobuf:"varint,8,opt,name=IsPrimary,proto3" json:"IsPrimary,omitempty"`
	Pipeline      *Pipeline `protobuf:"bytes,9,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *Monitor) Reset() {
	*x = Monitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Monitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitor) ProtoMessage() {}

func (x *Monitor) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitor.ProtoReflect.Descriptor instead.
func (*Monitor) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{11}
}

func (x *Monitor) GetMonitorHandle() int32 {
	if x != nil {
		return x.MonitorHandle
	}
	return 0
}

func (x *Monitor) GetMonitorName() string {
	if x != nil {
		return x.MonitorName
	}
	return ""
}

func (x *Monitor) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *Monitor) GetAdapter() string {
	if x != nil {
		return x.Adapter
	}
	return ""
}

func (x *Monitor) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Monitor) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Monitor) GetFramerate() int32 {
	if x != nil {
		return x.Framerate
	}
	return 0
}

func (x *Monitor) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *Monitor) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

type Soundcard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceID string    `protobuf:"bytes,1,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Api      string    `protobuf:"bytes,3,opt,name=Api,proto3" json:"Api,omitempty"`
	Pipeline *Pipeline `protobuf:"bytes,6,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *Soundcard) Reset() {
	*x = Soundcard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Soundcard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Soundcard) ProtoMessage() {}

func (x *Soundcard) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Soundcard.ProtoReflect.Descriptor instead.
func (*Soundcard) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{12}
}

func (x *Soundcard) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *Soundcard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Soundcard) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *Soundcard) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

type Microphone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceID string    `protobuf:"bytes,1,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Api      string    `protobuf:"bytes,3,opt,name=Api,proto3" json:"Api,omitempty"`
	Pipeline *Pipeline `protobuf:"bytes,6,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *Microphone) Reset() {
	*x = Microphone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Microphone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Microphone) ProtoMessage() {}

func (x *Microphone) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Microphone.ProtoReflect.Descriptor instead.
func (*Microphone) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{13}
}

func (x *Microphone) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *Microphone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Microphone) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *Microphone) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

type MediaDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   string        `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Monitors    []*Monitor    `protobuf:"bytes,2,rep,name=monitors,proto3" json:"monitors,omitempty"`
	Soundcards  []*Soundcard  `protobuf:"bytes,3,rep,name=soundcards,proto3" json:"soundcards,omitempty"`
	Microphones []*Microphone `protobuf:"bytes,4,rep,name=microphones,proto3" json:"microphones,omitempty"`
}

func (x *MediaDevice) Reset() {
	*x = MediaDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaDevice) ProtoMessage() {}

func (x *MediaDevice) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaDevice.ProtoReflect.Descriptor instead.
func (*MediaDevice) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{14}
}

func (x *MediaDevice) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *MediaDevice) GetMonitors() []*Monitor {
	if x != nil {
		return x.Monitors
	}
	return nil
}

func (x *MediaDevice) GetSoundcards() []*Soundcard {
	if x != nil {
		return x.Soundcards
	}
	return nil
}

func (x *MediaDevice) GetMicrophones() []*Microphone {
	if x != nil {
		return x.Microphones
	}
	return nil
}

type MediaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Monitor   *Monitor   `protobuf:"bytes,1,opt,name=monitor,proto3" json:"monitor,omitempty"`
	Soundcard *Soundcard `protobuf:"bytes,2,opt,name=soundcard,proto3" json:"soundcard,omitempty"`
}

func (x *MediaConfig) Reset() {
	*x = MediaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaConfig) ProtoMessage() {}

func (x *MediaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaConfig.ProtoReflect.Descriptor instead.
func (*MediaConfig) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{15}
}

func (x *MediaConfig) GetMonitor() *Monitor {
	if x != nil {
		return x.Monitor
	}
	return nil
}

func (x *MediaConfig) GetSoundcard() *Soundcard {
	if x != nil {
		return x.Soundcard
	}
	return nil
}

type Pipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineHash   string `protobuf:"bytes,1,opt,name=PipelineHash,proto3" json:"PipelineHash,omitempty"`
	PipelineString string `protobuf:"bytes,2,opt,name=PipelineString,proto3" json:"PipelineString,omitempty"`
	Plugin         string `protobuf:"bytes,3,opt,name=Plugin,proto3" json:"Plugin,omitempty"`
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conductor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_conductor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_conductor_proto_rawDescGZIP(), []int{16}
}

func (x *Pipeline) GetPipelineHash() string {
	if x != nil {
		return x.PipelineHash
	}
	return ""
}

func (x *Pipeline) GetPipelineString() string {
	if x != nil {
		return x.PipelineString
	}
	return ""
}

func (x *Pipeline) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

var File_conductor_proto protoreflect.FileDescriptor

var file_conductor_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x3e, 0x0a, 0x06, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x07, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x65,
	0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x10, 0x0a, 0x03, 0x45, 0x4f, 0x46, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x4f,
	0x46, 0x22, 0x6f, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x70,
	0x70, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x78, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x76,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x22, 0x80, 0x02,
	0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x72, 0x74,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x0b, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x22, 0x6f, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x70, 0x74,
	0x73, 0x22, 0xac, 0x02, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x43,
	0x50, 0x55, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x10, 0x0a,
	0x03, 0x52, 0x41, 0x4d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x52, 0x41, 0x4d, 0x12,
	0x12, 0x0a, 0x04, 0x42, 0x49, 0x4f, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x42,
	0x49, 0x4f, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x12, 0x12, 0x0a,
	0x04, 0x47, 0x50, 0x55, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x47, 0x50, 0x55,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x49, 0x43, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x49, 0x43, 0x73,
	0x22, 0x69, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x5d, 0x0a, 0x0c, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x07, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0x7d, 0x0a, 0x09, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x41, 0x70, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x70,
	0x69, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0x7e, 0x0a, 0x0a, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x41, 0x70, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x70,
	0x69, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0xc7, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2d, 0x0a, 0x08, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x33,
	0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x63, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x0b,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x0b, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x07,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x61, 0x72, 0x64, 0x52,
	0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x61, 0x72, 0x64, 0x22, 0x6e, 0x0a, 0x08, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x32, 0xa5, 0x03, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63,
	0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x28, 0x01, 0x30, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x72, 0x28, 0x01, 0x12, 0x38, 0x0a, 0x0b,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x72, 0x28, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x72, 0x28, 0x01, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x72, 0x28, 0x01,
	0x12, 0x44, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x66,
	0x65, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x72,
	0x28, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_conductor_proto_rawDescOnce sync.Once
	file_conductor_proto_rawDescData = file_conductor_proto_rawDesc
)

func file_conductor_proto_rawDescGZIP() []byte {
	file_conductor_proto_rawDescOnce.Do(func() {
		file_conductor_proto_rawDescData = protoimpl.X.CompressGZIP(file_conductor_proto_rawDescData)
	})
	return file_conductor_proto_rawDescData
}

var file_conductor_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_conductor_proto_goTypes = []interface{}{
	(*Closer)(nil),         // 0: protobuf.Closer
	(*Account)(nil),        // 1: protobuf.Account
	(*StorageStatus)(nil),  // 2: protobuf.StorageStatus
	(*StorageChunk)(nil),   // 3: protobuf.StorageChunk
	(*WorkerSessions)(nil), // 4: protobuf.WorkerSessions
	(*AppSession)(nil),     // 5: protobuf.AppSession
	(*WorkerSession)(nil),  // 6: protobuf.WorkerSession
	(*Partition)(nil),      // 7: protobuf.Partition
	(*WorkerInfor)(nil),    // 8: protobuf.WorkerInfor
	(*WorkerLog)(nil),      // 9: protobuf.WorkerLog
	(*WorkerMetric)(nil),   // 10: protobuf.WorkerMetric
	(*Monitor)(nil),        // 11: protobuf.Monitor
	(*Soundcard)(nil),      // 12: protobuf.Soundcard
	(*Microphone)(nil),     // 13: protobuf.Microphone
	(*MediaDevice)(nil),    // 14: protobuf.MediaDevice
	(*MediaConfig)(nil),    // 15: protobuf.MediaConfig
	(*Pipeline)(nil),       // 16: protobuf.Pipeline
}
var file_conductor_proto_depIdxs = []int32{
	7,  // 0: protobuf.StorageStatus.info:type_name -> protobuf.Partition
	1,  // 1: protobuf.StorageStatus.account:type_name -> protobuf.Account
	6,  // 2: protobuf.WorkerSessions.sessions:type_name -> protobuf.WorkerSession
	5,  // 3: protobuf.WorkerSessions.apps:type_name -> protobuf.AppSession
	15, // 4: protobuf.WorkerSession.mediaConfig:type_name -> protobuf.MediaConfig
	7,  // 5: protobuf.WorkerInfor.partitions:type_name -> protobuf.Partition
	16, // 6: protobuf.Monitor.pipeline:type_name -> protobuf.Pipeline
	16, // 7: protobuf.Soundcard.pipeline:type_name -> protobuf.Pipeline
	16, // 8: protobuf.Microphone.pipeline:type_name -> protobuf.Pipeline
	11, // 9: protobuf.MediaDevice.monitors:type_name -> protobuf.Monitor
	12, // 10: protobuf.MediaDevice.soundcards:type_name -> protobuf.Soundcard
	13, // 11: protobuf.MediaDevice.microphones:type_name -> protobuf.Microphone
	11, // 12: protobuf.MediaConfig.monitor:type_name -> protobuf.Monitor
	12, // 13: protobuf.MediaConfig.soundcard:type_name -> protobuf.Soundcard
	4,  // 14: protobuf.Conductor.sync:input_type -> protobuf.WorkerSessions
	8,  // 15: protobuf.Conductor.infor:input_type -> protobuf.WorkerInfor
	14, // 16: protobuf.Conductor.mediadevice:input_type -> protobuf.MediaDevice
	9,  // 17: protobuf.Conductor.logger:input_type -> protobuf.WorkerLog
	10, // 18: protobuf.Conductor.monitor:input_type -> protobuf.WorkerMetric
	3,  // 19: protobuf.Conductor.storagetranfer:input_type -> protobuf.StorageChunk
	2,  // 20: protobuf.Conductor.storagesync:input_type -> protobuf.StorageStatus
	4,  // 21: protobuf.Conductor.sync:output_type -> protobuf.WorkerSessions
	0,  // 22: protobuf.Conductor.infor:output_type -> protobuf.Closer
	0,  // 23: protobuf.Conductor.mediadevice:output_type -> protobuf.Closer
	0,  // 24: protobuf.Conductor.logger:output_type -> protobuf.Closer
	0,  // 25: protobuf.Conductor.monitor:output_type -> protobuf.Closer
	3,  // 26: protobuf.Conductor.storagetranfer:output_type -> protobuf.StorageChunk
	0,  // 27: protobuf.Conductor.storagesync:output_type -> protobuf.Closer
	21, // [21:28] is the sub-list for method output_type
	14, // [14:21] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_conductor_proto_init() }
func file_conductor_proto_init() {
	if File_conductor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_conductor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Closer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conductor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conductor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conductor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conductor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerSessions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conductor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conductor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conductor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conductor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerInfor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conductor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conductor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conductor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Monitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conductor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Soundcard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conductor_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Microphone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conductor_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conductor_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conductor_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_conductor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_conductor_proto_goTypes,
		DependencyIndexes: file_conductor_proto_depIdxs,
		MessageInfos:      file_conductor_proto_msgTypes,
	}.Build()
	File_conductor_proto = out.File
	file_conductor_proto_rawDesc = nil
	file_conductor_proto_goTypes = nil
	file_conductor_proto_depIdxs = nil
}
