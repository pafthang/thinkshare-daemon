services:
    daemon:
        image: pigeatgarlic/managedaemon
        restart: unless-stopped
        environment:
            BASE_URL: https://play.thinkmay.net
            SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
        volumes:
            - ./cluster.yaml:/cluster.yaml:ro

    turn:
        image: pigeatgarlic/turndaemon
        restart: unless-stopped
        network_mode: host
        environment:
            PATH: /turn.json
            PORT: 8080
        volumes:
            - ./turn.json:/turn.json:rw
    gateway:
        image: pigeatgarlic/virtdaemon
        restart: unless-stopped
        ports:
            - 80:80
            - 443:443
        environment:
            SERVICE_DOMAIN: play.thinkmay.net
            MONITOR_DOMAIN: monitor.1.thinkmay.net
            ADMIN_DOMAIN: admin.1.thinkmay.net
            DATA_DOMAIN: data.1.thinkmay.net
            MANAGE_VOLUME: volume.1.thinkmay.net

            ADMIN_USERNAME: thinkmay
            ADMIN_PASSWORD: thinkmayvantue
            DISABLE_HTTPS: false
            WEB_DIR: /web
        volumes:
            - ./_volumes/pocketbase:/pb_data
            - ./web/dist:/web:ro
            - ./cluster.yaml:/cluster.yaml:ro
            - ./binary/os.qcow2:/os.qcow2:ro
            - ./binary/app.qcow2:/app.qcow2:ro
    studio:
        container_name: supabase-studio
        image: supabase/studio:20230803-15c6762
        restart: unless-stopped
        healthcheck:
            test: [ "CMD", "node", "-e", "require('http').get('http://localhost:3000/api/profile', (r) => {if (r.statusCode !== 200) throw new Error(r.statusCode)})" ]
            timeout: 5s
            interval: 5s
            retries: 3
        environment:
            STUDIO_PG_META_URL: http://meta:8080
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

            DEFAULT_ORGANIZATION_NAME: thinkmay
            DEFAULT_PROJECT_NAME: thinkmay

            SUPABASE_URL: http://gateway
            SUPABASE_PUBLIC_URL: http://data.thinkmay.net
            SUPABASE_ANON_KEY: ${ANON_KEY}
            SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}

            NEXT_PUBLIC_ENABLE_LOGS: false

    realtime:
        # This container name looks inconsistent but is correct because realtime constructs tenant id by parsing the subdomain
        container_name: realtime-dev.supabase-realtime
        image: supabase/realtime:v2.30.34
        depends_on:
            db:
                # Disable this if you are using an external Postgres database
                condition: service_healthy
        healthcheck:
            test:
                [
                    "CMD",
                    "curl",
                    "-sSfL",
                    "--head",
                    "-o",
                    "/dev/null",
                    "-H",
                    "Authorization: Bearer ${ANON_KEY}",
                    "http://localhost:4000/api/tenants/realtime-dev/health"
                ]
            timeout: 5s
            interval: 5s
            retries: 3
        restart: unless-stopped
        environment:
            PORT: 4000
            DB_HOST: ${POSTGRES_HOST}
            DB_PORT: ${POSTGRES_PORT}
            DB_USER: supabase_admin
            DB_PASSWORD: ${POSTGRES_PASSWORD}
            DB_NAME: ${POSTGRES_DB}
            DB_AFTER_CONNECT_QUERY: 'SET search_path TO _realtime'
            DB_ENC_KEY: supabaserealtime
            API_JWT_SECRET: ${JWT_SECRET}
            SECRET_KEY_BASE: UpNVntn3cDxHJpq99YMc1T1AQgQpc8kfYTuRgBiYa15BLrx8etQoXz3gZv1/u2oq
            ERL_AFLAGS: -proto_dist inet_tcp
            DNS_NODES: "''"
            RLIMIT_NOFILE: "10000"
            APP_NAME: realtime
            SEED_SELF_HOST: true

    auth:
        container_name: supabase-auth
        image: supabase/gotrue:v2.82.4
        depends_on:
            db:
                # Disable this if you are using an external Postgres database
                condition: service_healthy
        healthcheck:
            test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health" ]
            timeout: 5s
            interval: 5s
            retries: 3
        restart: unless-stopped
        environment:
            GOTRUE_API_HOST: 0.0.0.0
            GOTRUE_API_PORT: 9999
            API_EXTERNAL_URL: ${API_EXTERNAL_URL}

            GOTRUE_DB_DRIVER: postgres
            GOTRUE_DB_DATABASE_URL: postgres://supabase_auth_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

            GOTRUE_SITE_URL: ${SITE_URL}
            GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS}

            GOTRUE_JWT_ADMIN_ROLES: service_role
            GOTRUE_JWT_AUD: authenticated
            GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
            GOTRUE_JWT_EXP: ${JWT_EXPIRY}
            GOTRUE_JWT_SECRET: ${JWT_SECRET}

            GOTRUE_DISABLE_SIGNUP: false
            GOTRUE_EXTERNAL_EMAIL_ENABLED: true
            GOTRUE_MAILER_AUTOCONFIRM: true
            GOTRUE_EXTERNAL_GOOGLE_ENABLED: false
            GOTRUE_EXTERNAL_PHONE_ENABLED: false
            GOTRUE_SMS_AUTOCONFIRM: false
    rest:
        container_name: supabase-rest
        image: postgrest/postgrest:v11.1.0
        depends_on:
            db:
                # Disable this if you are using an external Postgres database
                condition: service_healthy
        restart: unless-stopped
        environment:
            PGRST_DB_URI: postgres://authenticator:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
            PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS}
            PGRST_DB_ANON_ROLE: anon
            PGRST_JWT_SECRET: ${JWT_SECRET}
            PGRST_DB_USE_LEGACY_GUCS: "false"
    meta:
        container_name: supabase-meta
        image: supabase/postgres-meta:v0.68.0
        depends_on:
            db:
                # Disable this if you are using an external Postgres database
                condition: service_healthy
        restart: unless-stopped
        environment:
            PG_META_PORT: 8080
            PG_META_DB_HOST: ${POSTGRES_HOST}
            PG_META_DB_PORT: ${POSTGRES_PORT}
            PG_META_DB_NAME: ${POSTGRES_DB}
            PG_META_DB_USER: supabase_admin
            PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD}
    db:
        container_name: supabase-db
        image: supabase/postgres:15.1.1.78
        healthcheck:
            test: pg_isready -U postgres -h localhost
            interval: 5s
            timeout: 5s
            retries: 10
        ports:
            - 127.0.0.1:5432:${POSTGRES_PORT}
        command:
            - postgres
            - -c
            - config_file=/etc/postgresql/postgresql.conf
            - -c
            - log_min_messages=fatal # prevents Realtime polling queries from appearing in logs
        restart: unless-stopped
        environment:
            POSTGRES_HOST: /var/run/postgresql
            PGPORT: ${POSTGRES_PORT}
            POSTGRES_PORT: ${POSTGRES_PORT}
            PGPASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            PGDATABASE: ${POSTGRES_DB}
            POSTGRES_DB: ${POSTGRES_DB}
            JWT_SECRET: ${JWT_SECRET}
            JWT_EXP: ${JWT_EXPIRY}
        volumes:
            - ./_volumes/supabase/realtime.sql:/docker-entrypoint-initdb.d/migrations/99-realtime.sql:Z
            # Must be superuser to create event trigger
            - ./_volumes/supabase/webhooks.sql:/docker-entrypoint-initdb.d/init-scripts/98-webhooks.sql:Z
            # Must be superuser to alter reserved role
            - ./_volumes/supabase/roles.sql:/docker-entrypoint-initdb.d/init-scripts/99-roles.sql:Z
            # Initialize the database settings with JWT_SECRET and JWT_EXP
            - ./_volumes/supabase/jwt.sql:/docker-entrypoint-initdb.d/init-scripts/99-jwt.sql:Z
            # PGDATA directory is persisted between restarts
            - ./_volumes/supabase/data:/var/lib/postgresql/data:Z
            # Changes required for Analytics support
            - ./_volumes/supabase/logs.sql:/docker-entrypoint-initdb.d/migrations/99-logs.sql:Z
            # Use named volume to persist pgsodium decryption key between restarts
            # - db-config:/etc/postgresql-custom

    grafana:
        image: grafana/grafana
        volumes:
            - ./_volumes/grafana:/var/lib/grafana
    node-exporter:
        image: prom/node-exporter:latest
        restart: unless-stopped
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        command:
            - '--path.procfs=/host/proc'
            - '--path.rootfs=/rootfs'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    prometheus:
        image: prom/prometheus:latest
        restart: unless-stopped
        volumes:
            - ./utils/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
            - ./_volumes/prometheus:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.enable-lifecycle'
    admin:
        image: pigeatgarlic/thinkmay_dashboard:0.0.10
        restart: unless-stopped
        environment:
            - VITE_PUBLIC_SUPABASE_URL=https://play.thinkmay.net
            - VITE_PUBLIC_SUPABASE_ANON_KEY=${SERVICE_ROLE_KEY}
            - VITE_PUBLIC_POCKETBASE_URL=https://play.thinkmay.net
            - VITE_PUBLIC_MANAGE_VOLUME_URL=https://play.thinkmay.net

            - VITE_PUBLIC_SUPABASE_MANAGE_URL=${SUPABASE_MANAGE_URL}
            - VITE_PUBLIC_SUPABASE_MANAGE_ANON_KEY=${SUPABASE_MANAGE_ANON_KEY}
            - VITE_PUBLIC_POCKETBASE_DOMAIN=play.thinkmay.net
    manage_volume:
        image: pigeatgarlic/host_manage_volume:0.0.3
